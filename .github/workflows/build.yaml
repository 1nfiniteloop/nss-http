name: Build app

on:
  push:
    tags:
      - 'v*'

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ref: https://github.com/docker/build-push-action
      - name: Create builder container
        uses: docker/build-push-action@v2
        with:
          context: .
          file: .devcontainer/ubuntu/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            1nfiniteloop/nss-http-builder:latest
            1nfiniteloop/nss-http-builder:1.0.0
          # ref: https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-use-an-external-cache-source-for-a-build---cache-from
          cache-from: type=registry,ref=1nfiniteloop/nss-http-builder:latest
          cache-to: type=inline

      # ref: https://github.com/actions/cache
      - name: Get cache for third party dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: third_party_root/install
          key: third-party-${{ hashFiles('third_party') }}

      - name: Build third-party dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker run \
            --rm \
            --user root \
            --workdir /home/build \
            --env THIRD_PARTY_ROOT=/home/build/nss-http/third_party_root \
            --volume $(pwd):/home/build/nss-http \
            1nfiniteloop/nss-http-builder /bin/bash -c ' \
              mkdir --parents nss-http/third_party_root/source \
                && for dep in nss-http/third_party/{boost,cpr,yaml_cpp}; \
                   do ${dep} || break; done'

      - name: Build nss-http
        run: |
          docker run \
            --rm \
            --user root \
            --workdir /home/build \
            --env THIRD_PARTY_ROOT=/home/build/nss-http/third_party_root \
            --volume $(pwd):/home/build/nss-http \
            1nfiniteloop/nss-http-builder /bin/bash -c ' \
              mkdir --parents nss-http/build/Release
              cmake \
                -D VERSION=1.0.0 \
                -D BUILD=Release \
                -D UNITTEST=OFF \
                -S nss-http \
                -B nss-http/build/Release \
              && make --directory=nss-http/build/Release package'

      # ref: https://github.com/actions/create-release
      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      # ref: https://github.com/actions/upload-release-asset
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./build/Release/nss-http-1.0.0-Linux.deb
          asset_name: nss-http-1.0.0-Linux.deb
          asset_content_type: application/gzip
